import React, { useState, useContext, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { AdminTitleContext } from "../../../layouts/adminLayout/AdminLayout/AdminLayout";
import "./CustomerMainPage.css";
import search from "../../../assets/icons/customer/header/search.png";
import { MdOutlineAddBox } from "react-icons/md";
import { GoTrash } from "react-icons/go";
import { MdOutlineRemoveRedEye } from "react-icons/md";
import AddCustomer from "../../../components/Admin/CustomerManagement/AddCustomer/AddCustomer";
import { BE_ENDPOINT, fetchGet, fetchDelete } from "../../../lib/httpHandler";
import Swal from "sweetalert2";
import withReactContent from "sweetalert2-react-content";

export default function CustomerMainPage() {
  const { setTitle, setSubtitle } = useContext(AdminTitleContext);
  const navigate = useNavigate();

  useEffect(() => {
    setTitle("T·∫•t c·∫£ kh√°ch h√†ng");
    setSubtitle("Th√¥ng tin t·∫•t c·∫£ kh√°ch h√†ng");
  }, [setTitle, setSubtitle]);

  const [showAdd, setShowAdd] = useState(false);
  const [customers, setCustomers] = useState([]);
  const [accounts, setAccounts] = useState([]);
  const [searchValue, setSearchValue] = useState("");

  // Fetch all customers
  useEffect(() => {
    fetchGet(
      "/api/admin/customer/get-all",
      (res) => setCustomers(res.data || []),
      () => setCustomers([]),
      () => setCustomers([])
    );
  }, []);

  // Fetch all accounts to get lock status
  useEffect(() => {
    fetchGet(
      "/api/admin/account/get-all",
      (res) => setAccounts(res.data || []),
      () => setAccounts([]),
      () => setAccounts([])
    );
  }, []);

  // Search filter
  const filteredCustomers = customers
    .filter(
      (c) =>
        c.fullname?.toLowerCase().includes(searchValue.toLowerCase()) ||
        c.email?.toLowerCase().includes(searchValue.toLowerCase()) ||
        c.phoneNumber?.includes(searchValue)
    );

  // Get account status for customer
  const getAccountStatus = (customerId) => {
    const customer = customers.find(c => c.id === customerId);
    if (!customer || !customer.account_id) return "Kh√¥ng c√≥ t√†i kho·∫£n";
    
    const account = accounts.find(acc => acc.id === customer.account_id);
    if (!account) return "Kh√¥ng x√°c ƒë·ªãnh";
    
    return account.isLock ? "ƒê√£ kh√≥a" : "ƒêang m·ªü";
  };

  const handleShowAdd = () => setShowAdd(!showAdd);

  const handleShowDetail = (customer) => {
    navigate(`/admin/customers/${customer.id}`);
  };

  const MySwal = withReactContent(Swal);

  const handleDelete = (id) => {
    // Ki·ªÉm tra xem kh√°ch h√†ng c√≥ tour booking n√†o kh√¥ng
    fetchGet(
      `/api/admin/tour-booking/history/${id}`,
      (res) => {
        const bookings = res.data || [];
        if (bookings.length > 0) {
          MySwal.fire({
            icon: "warning",
            title: "Kh√¥ng th·ªÉ x√≥a kh√°ch h√†ng",
            html: `
              <div style="text-align: left; margin: 10px 0;">
                <p><strong>Kh√°ch h√†ng n√†y c√≥ l·ªãch s·ª≠ ƒë·∫∑t tour v√† kh√¥ng th·ªÉ x√≥a!</strong></p>
                <p style="margin: 10px 0;">üìã <strong>L√Ω do:</strong></p>
                <ul style="margin: 5px 0; padding-left: 20px;">
                  <li>C√≥ <strong>${bookings.length}</strong> booking ƒë√£ t·∫°o</li>
                  <li>C√≥ th·ªÉ li√™n quan ƒë·∫øn giao d·ªãch t√†i ch√≠nh</li>
                  <li>C·∫ßn gi·ªØ l·∫°i ƒë·ªÉ tra c·ª©u l·ªãch s·ª≠</li>
                </ul>
                <p style="color: #0066cc; font-weight: 500; margin-top: 10px;">
                  üí° <strong>G·ª£i √Ω:</strong> B·∫°n c√≥ th·ªÉ kh√≥a t√†i kho·∫£n thay v√¨ x√≥a.
                </p>
              </div>
            `,
            confirmButtonText: "ƒê√£ hi·ªÉu",
            confirmButtonColor: "#0066cc",
            width: '480px'
          });
          return;
        }

        // N·∫øu kh√¥ng c√≥ booking, ti·∫øp t·ª•c x√°c nh·∫≠n x√≥a
        MySwal.fire({
          icon: "warning",
          title: "X√°c nh·∫≠n x√≥a kh√°ch h√†ng",
          html: `
            <div style="text-align: left; margin: 10px 0;">
              <p><strong>B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a kh√°ch h√†ng n√†y?</strong></p>
              <p style="margin: 10px 0;"><strong>C√°c d·ªØ li·ªáu sau s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn:</strong></p>
              <ul style="margin: 5px 0; padding-left: 20px;">
                <li>‚úó T√†i kho·∫£n ƒëƒÉng nh·∫≠p</li>
                <li>‚úó Th√¥ng tin c√° nh√¢n</li>
                <li>‚úó Danh s√°ch th√†nh vi√™n</li>
                <li>‚úó Tour y√™u th√≠ch</li>
                <li>‚úó Gi·ªè h√†ng</li>
              </ul>
              <p style="color: #dc3545; font-weight: 500; margin-top: 10px;">
                ‚ö†Ô∏è H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!
              </p>
            </div>
          `,
          showCancelButton: true,
          confirmButtonText: "X√≥a kh√°ch h√†ng",
          cancelButtonText: "H·ªßy b·ªè",
          confirmButtonColor: "#dc3545",
          cancelButtonColor: "#6c757d",
          width: '500px'
        }).then((result) => {
          if (!result.isConfirmed) return;

          // Ti·∫øn h√†nh x√≥a
          performDelete(id);
        });
      },
      () => {
        MySwal.fire("L·ªói", "Kh√¥ng th·ªÉ ki·ªÉm tra l·ªãch s·ª≠ ƒë·∫∑t tour!", "error");
      },
      () => {
        MySwal.fire("L·ªói", "Kh√¥ng th·ªÉ ki·ªÉm tra l·ªãch s·ª≠ ƒë·∫∑t tour!", "error");
      }
    );
  };

  const performDelete = (id) => {
    // 1. L·∫•y danh s√°ch user member c·ªßa kh√°ch h√†ng
    fetchGet(
      `/api/admin/user-member/user/${id}`,
      (res) => {
        const members = res.data || [];
        console.log("User members to delete:", members);
        
        // 2. X√≥a t·ª´ng user member
        Promise.all(
          members.map((m) =>
            new Promise((resolve) => {
              fetchDelete(
                `/api/admin/user-member/delete/${m.id}`, 
                () => {
                  console.log(`Deleted user member ${m.id}`);
                  resolve();
                }, 
                (error) => {
                  console.error(`Failed to delete user member ${m.id}:`, error);
                  resolve(); // V·∫´n resolve ƒë·ªÉ kh√¥ng block
                }, 
                (exception) => {
                  console.error(`Exception deleting user member ${m.id}:`, exception);
                  resolve(); // V·∫´n resolve ƒë·ªÉ kh√¥ng block
                }
              );
            })
          )
        ).then(() => {
          // 3. X√≥a favorite tours c·ªßa user
          console.log("Cleaning up favorite tours for user:", id);
          fetchGet(
            `/api/admin/favorite-tour/user/${id}`,
            (favRes) => {
              const favorites = favRes.data || [];
              console.log("Favorite tours to delete:", favorites);
              
              Promise.all(
                favorites.map((fav) =>
                  new Promise((resolve) => {
                    fetchDelete(
                      `/api/admin/favorite-tour/remove/${fav.id}`,
                      () => {
                        console.log(`Deleted favorite tour ${fav.id}`);
                        resolve();
                      },
                      (error) => {
                        console.error(`Failed to delete favorite tour ${fav.id}:`, error);
                        resolve();
                      },
                      (exception) => {
                        console.error(`Exception deleting favorite tour ${fav.id}:`, exception);
                        resolve();
                      }
                    );
                  })
                )
              ).then(() => {
                // 4. X√≥a cart items c·ªßa user
                console.log("Cleaning up cart for user:", id);
                fetchDelete(
                  `/api/admin/cart/user/${id}/clear`,
                  () => {
                    console.log("Cart cleared successfully");
                    proceedWithAccountDeletion(id);
                  },
                  (error) => {
                    console.error("Error clearing cart:", error);
                    // V·∫´n ti·∫øp t·ª•c x√≥a user d√π cart clear th·∫•t b·∫°i
                    proceedWithAccountDeletion(id);
                  },
                  (exception) => {
                    console.error("Exception clearing cart:", exception);
                    // V·∫´n ti·∫øp t·ª•c x√≥a user d√π cart clear th·∫•t b·∫°i
                    proceedWithAccountDeletion(id);
                  }
                );
              });
            },
            (error) => {
              console.error("Error getting favorite tours:", error);
              // N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c favorite tours, v·∫´n ti·∫øp t·ª•c clear cart
              fetchDelete(
                `/api/admin/cart/user/${id}/clear`,
                () => {
                  console.log("Cart cleared successfully");
                  proceedWithAccountDeletion(id);
                },
                (error) => {
                  console.error("Error clearing cart:", error);
                  proceedWithAccountDeletion(id);
                },
                (exception) => {
                  console.error("Exception clearing cart:", exception);
                  proceedWithAccountDeletion(id);
                }
              );
            },
            (exception) => {
              console.error("Exception getting favorite tours:", exception);
              // N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c favorite tours, v·∫´n ti·∫øp t·ª•c clear cart
              fetchDelete(
                `/api/admin/cart/user/${id}/clear`,
                () => {
                  console.log("Cart cleared successfully");
                  proceedWithAccountDeletion(id);
                },
                (error) => {
                  console.error("Error clearing cart:", error);
                  proceedWithAccountDeletion(id);
                },
                (exception) => {
                  console.error("Exception clearing cart:", exception);
                  proceedWithAccountDeletion(id);
                }
              );
            }
          );
        });
      },
      (error) => {
        console.error("Error getting user members:", error);
        MySwal.fire("L·ªói", "Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch th√†nh vi√™n!", "error");
      },
      (exception) => {
        console.error("Exception getting user members:", exception);
        MySwal.fire("L·ªói", "L·ªói k·∫øt n·ªëi khi l·∫•y danh s√°ch th√†nh vi√™n!", "error");
      }
    );
  };

  // H√†m ri√™ng ƒë·ªÉ x·ª≠ l√Ω x√≥a account/customer sau khi ƒë√£ clean up
  const proceedWithAccountDeletion = (id) => {
    // L·∫•y accountId c·ªßa kh√°ch h√†ng
    fetchGet(
      `/api/admin/customer/get/${id}`,
      (res2) => {
        console.log("Customer data:", res2.data);
        const accountId = res2.data?.account_id;
        
        if (accountId) {
          console.log("Deleting account:", accountId);
          // X√≥a account (s·∫Ω t·ª± ƒë·ªông x√≥a customer theo cascade)
          fetchDelete(
            `/api/admin/account/delete/${accountId}`,
            () => {
              console.log("Account deleted successfully (customer also deleted by cascade)");
              // C·∫≠p nh·∫≠t danh s√°ch tr√™n FE
              setCustomers((prev) => {
                const newList = prev.filter((c) => c.id !== id);
                console.log("Updated customer list:", newList);
                return newList;
              });
              MySwal.fire({
                icon: "success",
                title: "ƒê√£ x√≥a kh√°ch h√†ng!",
                text: "ƒê√£ x√≥a kh√°ch h√†ng c√πng t·∫•t c·∫£ d·ªØ li·ªáu li√™n quan (th√†nh vi√™n, tour y√™u th√≠ch, gi·ªè h√†ng)",
                timer: 2000,
                showConfirmButton: false,
              });
            },
            (error) => {
              console.error("Error deleting account:", error);
              MySwal.fire("L·ªói", "X√≥a account th·∫•t b·∫°i!", "error");
            },
            (exception) => {
              console.error("Exception deleting account:", exception);
              MySwal.fire("L·ªói", "L·ªói k·∫øt n·ªëi khi x√≥a account!", "error");
            }
          );
        } else {
          console.log("No account to delete, proceeding to delete customer");
          // N·∫øu kh√¥ng c√≥ account, ch·ªâ x√≥a customer
          deleteCustomerFinal(id);
        }
      },
      (error) => {
        console.error("Error getting customer info:", error);
        MySwal.fire("L·ªói", "Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin kh√°ch h√†ng!", "error");
      },
      (exception) => {
        console.error("Exception getting customer info:", exception);
        MySwal.fire("L·ªói", "L·ªói k·∫øt n·ªëi khi l·∫•y th√¥ng tin kh√°ch h√†ng!", "error");
      }
    );
  };

  // H√†m ri√™ng ƒë·ªÉ x√≥a customer cu·ªëi c√πng
  const deleteCustomerFinal = (id) => {
    console.log("Deleting customer:", id);
    fetchDelete(
      `/api/admin/customer/delete/${id}`,
      () => {
        console.log("Customer deleted successfully");
        // C·∫≠p nh·∫≠t danh s√°ch tr√™n FE
        setCustomers((prev) => {
          const newList = prev.filter((c) => c.id !== id);
          console.log("Updated customer list:", newList);
          return newList;
        });
        MySwal.fire({
          icon: "success",
          title: "ƒê√£ x√≥a kh√°ch h√†ng!",
          timer: 1200,
          showConfirmButton: false,
        });
      },
      (error) => {
        console.error("Error deleting customer:", error);
        MySwal.fire("L·ªói", "X√≥a kh√°ch h√†ng th·∫•t b·∫°i!", "error");
      },
      (exception) => {
        console.error("Exception deleting customer:", exception);
        MySwal.fire("L·ªói", "L·ªói k·∫øt n·ªëi khi x√≥a kh√°ch h√†ng!", "error");
      }
    );
  };

  return (
    <div className="customer-container">
      <div className="top-bar">
        <div className="search-box">
          <img src={search} alt="Icon-Search" className="icon-search" />
          <input
            type="text"
            className="input-search"
            placeholder="T√¨m ki·∫øm ..."
            value={searchValue}
            onChange={(e) => setSearchValue(e.target.value)}
          />
        </div>
        <button
          className="add-button"
          title="Th√™m kh√°ch h√†ng m·ªõi"
          onClick={handleShowAdd}
        >
          <MdOutlineAddBox className="add-icon" />
          Th√™m kh√°ch h√†ng
        </button>
      </div>

      <table className="customer-table">
        <thead>
          <tr>
            <th>Avatar</th>
            <th>H·ªç t√™n</th>
            <th>Email</th>
            <th>SƒêT</th>
            <th>Ng√†y sinh</th>
            <th>Gi·ªõi t√≠nh</th>
            <th>Tr·∫°ng th√°i</th>
            <th>Xem</th>
            <th>X√≥a</th>
          </tr>
        </thead>
        <tbody>
          {filteredCustomers.length === 0 ? (
            <tr>
              <td colSpan={9} style={{ textAlign: "center" }}>
                Kh√¥ng c√≥ kh√°ch h√†ng n√†o.
              </td>
            </tr>
          ) : (
            filteredCustomers.map((cus, idx) => (
              <tr key={cus.id}>
                <td>
                  <img
                    src={cus.avatar?.startsWith("http") ? cus.avatar : BE_ENDPOINT + cus.avatar}
                    alt="avatar"
                    style={{ width: 36, height: 36, borderRadius: "50%" }}
                  />
                </td>
                <td>{cus.fullname}</td>
                <td>{cus.email}</td>
                <td>{cus.phoneNumber}</td>
                <td>{cus.birthday}</td>
                <td>{cus.sex ? "Nam" : "N·ªØ"}</td>
                <td>
                  <span 
                    style={{
                      color: getAccountStatus(cus.id) === "ƒê√£ kh√≥a" ? "#dc3545" : "#28a745",
                      fontWeight: "600"
                    }}
                  >
                    {getAccountStatus(cus.id)}
                  </span>
                </td>
                <td>
                  <MdOutlineRemoveRedEye
                    className="view-button"
                    title="Xem chi ti·∫øt"
                    onClick={() => handleShowDetail(cus)}
                  />
                </td>
                <td>
                  <GoTrash
                    className="delete-button"
                    title="X√≥a"
                    onClick={() => handleDelete(cus.id)}
                  />
                </td>
              </tr>
            ))
          )}
        </tbody>
      </table>
      {/* Popup th√™m kh√°ch h√†ng */}
      {showAdd && (
        <AddCustomer
          onCloseAddForm={handleShowAdd}
          onAdded={(newCus) => {
            setCustomers((prev) => [...prev, newCus]);
            // C·∫≠p nh·∫≠t l·∫°i danh s√°ch accounts ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng tr·∫°ng th√°i
            fetchGet(
              "/api/admin/account/get-all",
              (res) => setAccounts(res.data || []),
              () => {},
              () => {}
            );
          }}
        />
      )}
    </div>
  );
}