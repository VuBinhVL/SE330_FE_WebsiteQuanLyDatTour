import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import "./OrderDetail.css";
import { ReactComponent as ViewIcon } from "../../../assets/icons/admin/Frame 23.svg";
import { ReactComponent as EditIcon } from "../../../assets/icons/admin/N√∫t s·ª≠a.svg";

import EditCustomerPopup from "./EditCustomerPopup";
import { fetchGet, fetchPut } from "../../../lib/httpHandler";

export default function OrderDetail() {
  const { invoiceId } = useParams();
  const navigate = useNavigate();

  const [order, setOrder] = useState(null);
  const [isPopupOpen, setIsPopupOpen] = useState(false);
  const [orderStatus, setOrderStatus] = useState("");
  const [customerData, setCustomerData] = useState({
    name: "",
    gender: "",
    birthdate: "",
    email: "",
    address: "",
  });

  useEffect(() => {
  fetchGet(
    `/api/admin/invoice/get/${invoiceId}`,
    (res) => {
      const data = res.data;
      setOrder(data);

      // üîß ∆Øu ti√™n hi·ªÉn th·ªã tr·∫°ng th√°i "ƒê√£ h·ªßy" n·∫øu ƒë∆°n ƒë√£ b·ªã h·ªßy
      if (data.isCanceled) {
        setOrderStatus("ƒê√£ h·ªßy");
      } else {
        setOrderStatus(data.paymentStatus ? "ƒê√£ thanh to√°n" : "Ch∆∞a thanh to√°n");
      }

      setCustomerData({
        name: data.customerName || "",
        gender: data.user?.sex ? "Nam" : "N·ªØ" || "",
        birthdate: data.user?.birthday || "",
        email: data.user?.email || "",
        address: data.user?.address || "",
      });
    },
      () => setOrder(null),
      () => alert("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ƒë∆°n h√†ng.")
    );
  }, [invoiceId]);


  const handleViewBooking = (booking) => {
    navigate(`/admin/tour-bookings/detail-booking/${booking.id}`, {
      state: { booking },
    });
  };

  const handleCancelOrder = () => {
  const confirmCancel = window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy ƒë∆°n h√†ng n√†y?");
  if (!confirmCancel) return;

  const updatedInvoice = {
    ...order,
    isCanceled: true,
  };

  fetchPut(
    `/api/admin/invoice/update/${invoiceId}`,
    updatedInvoice,
    (res) => {
      alert("ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng!");
      setOrderStatus("ƒê√£ h·ªßy");
      setOrder((prev) => ({ ...prev, isCanceled: true }));
    },
    () => alert("Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng"),
    () => alert("L·ªói h·ªá th·ªëng khi h·ªßy ƒë∆°n h√†ng")
  );
};


  const handleConfirmPayment = () => {
  if (orderStatus === "ƒê√£ h·ªßy") {
    alert("ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy. Kh√¥ng th·ªÉ thanh to√°n.");
    return;
  }

  const updatedInvoice = {
    ...order,
    paymentStatus: true,
  };

  fetchPut(
    `/api/admin/invoice/update/${order.id}`,
    updatedInvoice,
    (res) => {
      alert("X√°c nh·∫≠n thanh to√°n th√†nh c√¥ng!");
      setOrderStatus("ƒê√£ thanh to√°n");
    },
    () => alert("Kh√¥ng th·ªÉ x√°c nh·∫≠n thanh to√°n"),
    () => alert("L·ªói h·ªá th·ªëng khi x√°c nh·∫≠n thanh to√°n")
  );
  };

  if (!order) {
    return <p>ƒêang t·∫£i th√¥ng tin ƒë∆°n h√†ng...</p>;
  }

  return (
    <div className="order-detail-container">
      {/* Th√¥ng tin kh√°ch h√†ng */}
      <div className="customer-info">
        <div className="section-header">
          <h3>Th√¥ng tin kh√°ch h√†ng</h3>
          <button className="edit-btn" onClick={() => setIsPopupOpen(true)}>
            <EditIcon className="icon-svg" />
          </button>
        </div>

        <div className="grid-form">
          <div className="form-group">
            <label>H·ªç v√† t√™n:</label>
            <input type="text" value={customerData.name} readOnly />
          </div>
          <div className="form-group">
            <label>Gi·ªõi t√≠nh:</label>
            <input type="text" value={customerData.gender} readOnly />
          </div>
          <div className="form-group">
            <label>Ng√†y sinh:</label>
            <input
              type="text"
              value={
                customerData.birthdate
                  ? new Date(customerData.birthdate).toLocaleDateString("vi-VN")
                  : ""
              }
              readOnly
            />
          </div>
          <div className="form-group">
            <label>Email:</label>
            <input type="text" value={customerData.email} readOnly />
          </div>
          <div className="form-group">
            <label>ƒê·ªãa ch·ªâ:</label>
            <input type="text" value={customerData.address} readOnly />
          </div>
        </div>
      </div>

      <EditCustomerPopup
        isOpen={isPopupOpen}
        onClose={() => setIsPopupOpen(false)}
        initialData={customerData}
        onSubmit={setCustomerData}
      />

      {/* Th√¥ng tin ƒë∆°n h√†ng */}
      <div className="order-payment-container">
        <div className="order-info">
          <h3>Th√¥ng tin ƒë∆°n h√†ng</h3>
          <div className="grid-form">
            <div className="form-group">
              <label>M√£ ƒë∆°n h√†ng:</label>
              <input type="text" value={order.id} readOnly />
            </div>
            <div className="form-group">
              <label>Ng√†y t·∫°o:</label>
              <input
                type="text"
                value={new Date(order.createdAt).toLocaleString("vi-VN")}
                readOnly
              />
            </div>
            <div className="form-group">
              <label>S·ªë l∆∞·ª£ng tour:</label>
              <input
                type="text"
                value={order.tourBookings ? order.tourBookings.length : 0}
                readOnly
              />

            </div>
            <div className="form-group">
              <label>T·ªïng ti·ªÅn:</label>
              <input
                type="text"
                value={new Intl.NumberFormat("vi-VN", {
                  style: "currency",
                  currency: "VND",
                }).format(order.totalAmount)}
                readOnly
              />
            </div>
            <div className="form-group">
              <label>Ph∆∞∆°ng th·ª©c thanh to√°n:</label>
              <input type="text" value={order.paymentMethod} readOnly />
            </div>
            <div className="form-group">
              <label>Tr·∫°ng th√°i:</label>
              <input type="text" value={orderStatus} readOnly />
            </div>
          </div>
          <div className="confirm-btn-wrapper">
            {orderStatus !== "ƒê√£ h·ªßy" && !order.paymentStatus && (
              <button className="confirm-btn" onClick={handleConfirmPayment}>
                X√°c nh·∫≠n thanh to√°n
              </button>
            )}

          </div>
        </div>

        
      </div>

      {/* Phi·∫øu ƒë·∫∑t ch·ªó */}
      <div className="booking-detail-container">
        <h3>Danh s√°ch phi·∫øu ƒë·∫∑t ch·ªó</h3>
        <table className="booking-table">
          <thead>
            <tr>
              <th>T√™n tuy·∫øn du l·ªãch</th>
              <th>M√£ chuy·∫øn du l·ªãch</th>
              <th>Ng√†y ƒë·∫∑t</th>
              <th>S·ªë l∆∞·ª£ng ch·ªó</th>
              <th>T·ªïng ti·ªÅn</th>
              <th>Xem</th>
            </tr>
          </thead>
          <tbody>
          {order.tourBookings && order.tourBookings.length > 0 ? (
            order.tourBookings.map((booking, index) => (
              <tr key={index}>
                <td>{booking.tourRoute?.routeName}</td>
                <td>{booking.tourId}</td>
                <td>{new Date(booking.createdAt).toLocaleDateString("vi-VN")}</td>
                <td>{booking.seatsBooked}</td>
                <td>
                  {new Intl.NumberFormat("vi-VN", {
                    style: "currency",
                    currency: "VND",
                  }).format(booking.totalPrice)}
                </td>
                <td>
                  <button
                    className="view-btn"
                    onClick={() => handleViewBooking(booking)}
                  >
                    <ViewIcon className="icon-svg" />
                  </button>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="6" style={{ textAlign: "center" }}>
                Kh√¥ng c√≥ phi·∫øu ƒë·∫∑t n√†o.
              </td>
            </tr>
          )}
        </tbody>

        </table>
      </div>

      {orderStatus !== "ƒê√£ h·ªßy" && !order.paymentStatus &&(
        <div className="actions">
          <button className="cancel-btn" onClick={handleCancelOrder}>
            H·ªßy ƒë∆°n h√†ng
          </button>
        </div>
      )}
    </div>
  );
}
